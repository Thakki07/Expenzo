"use strict";
/**
 * Shared constants for color utilities
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MODERN_CSS_LIMITS = exports.COLOR_BOUNDS = exports.RELATIVE_SHADE_STEPS = exports.LIGHTNESS_MIX_DATA = exports.ALPHA_VALUES = exports.ALPHA_PERCENTAGES = exports.LIGHTNESS_CONFIG = exports.ALL_SHADES = exports.DARK_SHADES = exports.LIGHT_SHADES = exports.COLOR_SCALE = void 0;
// Core color scale definition
exports.COLOR_SCALE = [
    25, 50, 100, 150, 200, 300, 400, 500, 600, 700, 750, 800, 850, 900, 950,
];
// Shade groupings for scale generation
exports.LIGHT_SHADES = ['400', '300', '200', '150', '100', '50', '25'];
exports.DARK_SHADES = ['600', '700', '750', '800', '850', '900', '950'];
exports.ALL_SHADES = [...exports.LIGHT_SHADES, '500', ...exports.DARK_SHADES];
// Lightness configuration for scale generation
exports.LIGHTNESS_CONFIG = {
    TARGET_LIGHT: 97, // Target lightness for 50 shade
    TARGET_DARK: 12, // Target lightness for 900 shade
    LIGHT_STEPS: 7, // Number of light shades
    DARK_STEPS: 7, // Number of dark shades
};
// Alpha percentages for color-mix generation
exports.ALPHA_PERCENTAGES = {
    25: 2,
    50: 3,
    100: 7,
    150: 11,
    200: 15,
    300: 28,
    400: 41,
    500: 53,
    600: 62,
    700: 73,
    750: 78,
    800: 81,
    850: 84,
    900: 87,
    950: 92,
};
exports.ALPHA_VALUES = Object.values(exports.ALPHA_PERCENTAGES)
    .map(v => v / 100)
    .sort();
// Lightness mix data for color-mix generation
exports.LIGHTNESS_MIX_DATA = {
    25: { mixColor: 'white', percentage: 85 },
    50: { mixColor: 'white', percentage: 80 },
    100: { mixColor: 'white', percentage: 68 },
    150: { mixColor: 'white', percentage: 55 },
    200: { mixColor: 'white', percentage: 40 },
    300: { mixColor: 'white', percentage: 26 },
    400: { mixColor: 'white', percentage: 16 },
    500: { mixColor: null, percentage: 0 },
    600: { mixColor: 'black', percentage: 12 },
    700: { mixColor: 'black', percentage: 22 },
    750: { mixColor: 'black', percentage: 30 },
    800: { mixColor: 'black', percentage: 44 },
    850: { mixColor: 'black', percentage: 55 },
    900: { mixColor: 'black', percentage: 65 },
    950: { mixColor: 'black', percentage: 75 },
};
// Relative color syntax step configuration
exports.RELATIVE_SHADE_STEPS = {
    // Light shades (lighter than 500)
    400: 1,
    300: 2,
    200: 3,
    150: 4,
    100: 5,
    50: 6,
    25: 7,
    // Dark shades (darker than 500)
    600: 1,
    700: 2,
    750: 3,
    800: 4,
    850: 5,
    900: 6,
    950: 7,
};
// Color bounds for validation and clamping
exports.COLOR_BOUNDS = {
    rgb: { min: 0, max: 255 },
    alpha: { min: 0, max: 1 },
    hue: { min: 0, max: 360 },
    percentage: { min: 0, max: 100 },
};
// Modern CSS utility constants
exports.MODERN_CSS_LIMITS = {
    MAX_LIGHTNESS_MIX: 95, // Maximum percentage for color-mix with white
    MIN_ALPHA_PERCENTAGE: 5, // Minimum opacity for transparent color-mix
    MAX_LIGHTNESS_ADJUSTMENT: 30, // Maximum lightness adjustment in color-mix
    MIN_LIGHTNESS_FLOOR: 95, // Minimum lightness floor for very light colors
    LIGHTNESS_MULTIPLIER: 2, // Multiplier for lightness adjustments
    MIX_MULTIPLIER: 4, // Multiplier for mix percentage calculations
};
